{"version":3,"sources":["utils/utils.js","App.js","serviceWorker.js","index.js"],"names":["isEmpty","value","undefined","Object","keys","length","Array","isArray","trim","convertKeysToLowerCase","data","key","n","lowercasedKeysData","toLowerCase","createModel","product","quantity","packs","variables","ints","p","item","pack","cost","name","concat","objectSpread","defineProperty","optimize","opType","constraints","min","equal","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleProductUpload","event","target","files","type","setState","errorMsg","csvProductFile","handleOrderUpload","order","csvOrderFile","importCSV","_this$state","state","currentFile","Papa","parse","complete","updateProductData","header","updateOrderData","result","checkData","updatedProductData","map","d","indexOf","uPacksData","split","i","_pack$split","_pack$split2","slicedToArray","quanity","uPack","replace","push","console","log","loading","productFileData","orderFileData","displayPackTypes","orderObj","filter","includes","packType","react_default","a","createElement","packsToDelivery","_this$state2","resultsData","code","model","results","solver","Solve","rData","ordered","prevProps","prevState","_this$state3","_this2","_this$state4","shippingInfo","inputProductSuccessClass","inputProductOrderClass","className","id","onChange","htmlFor","ref","input","filesInput","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f1e1a75.chunk.js","sourcesContent":["export const isEmpty = value =>\n  value === undefined ||\n  value === null ||\n  value === 0 ||\n  (typeof value === 'object' && Object.keys(value).length === 0) ||\n  (Array.isArray(value) && value.length === 0) ||\n  (typeof value === 'string' && value.trim().length === 0) ||\n  (typeof value === 'string' && value === 'null');\n\nexport const convertKeysToLowerCase = data => {\n  let key,\n    keys = Object.keys(data);\n  let n = keys.length;\n  let lowercasedKeysData = {};\n  while (n--) {\n    key = keys[n];\n    lowercasedKeysData[key.toLowerCase()] = data[key];\n  }\n  return lowercasedKeysData;\n};\n\nexport const createModel = (product, quantity) => {\n  if (!isEmpty(product.packs)) {\n    let variables = {};\n    let ints = {};\n    for (let p = 0; p < product.packs.length; p++) {\n      const item = product.packs[p];\n      const pack = {\n        quantity: item.quantity,\n        cost: item.cost\n      };\n      let name = `pack${item.quantity}`;\n      variables = {\n        ...variables,\n        [name]: pack\n      };\n      ints = {\n        ...ints,\n        [name]: 1\n      };\n    }\n    const model = {\n      optimize: 'cost',\n      opType: 'min',\n      constraints: {\n        cost: { min: 0 },\n        quantity: { equal: quantity }\n      },\n      variables: variables,\n      ints: ints\n    };\n    return model;\n  }\n};\n","import React, { Component } from 'react';\nimport Papa from 'papaparse';\nimport {\n  isEmpty,\n  convertKeysToLowerCase,\n  createModel\n} from './utils/utils';\nimport solver from 'javascript-lp-solver';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      csvProductFile: null,\n      csvOrderFile: null,\n      productFileData: [],\n      orderFileData: [],\n      packsToDelivery: [],\n      loading: false,\n      currentFile: '',\n      errorMsg: {}\n    };\n  }\n\n  componentDidMount() {\n    const {\n      productFileData,\n      orderFileData,\n      packsToDelivery,\n      loading\n    } = this.state;\n\n    if (\n      !isEmpty(productFileData) &&\n      !isEmpty(orderFileData) &&\n      isEmpty(packsToDelivery) &&\n      loading === false\n    ) {\n      const resultsData = [];\n\n      for (let i = 0; i < orderFileData.length; i++) {\n        const item = orderFileData[i];\n\n        for (let p = 0; p < productFileData.length; p++) {\n          const product = productFileData[p];\n\n          if (item.code === product.code) {\n            const model = createModel(product, item.quantity);\n            let results = solver.Solve(model);\n            const rData = {\n              ...results,\n              code: item.code,\n              name: product.name,\n              ordered: item.quantity\n            };\n            resultsData.push(rData);\n          }\n        }\n      }\n\n      this.setState({\n        packsToDelivery: resultsData,\n        loading: false\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      csvProductFile,\n      csvOrderFile,\n      productFileData,\n      orderFileData,\n      packsToDelivery,\n      currentFile,\n      loading\n    } = this.state;\n\n    console.log('hito', csvProductFile);\n    if (!loading && prevState.csvProductFile !== csvProductFile) {\n      console.log('hit', csvProductFile);\n      if (csvProductFile === null) {\n        this.setState({\n          loading: false,\n          currentFile: ''\n        });\n      } else {\n        this.setState({\n          loading: true,\n          currentFile: 'product'\n        });\n      }\n    }\n    if (!loading && prevState.csvOrderFile !== csvOrderFile) {\n      this.setState({\n        loading: true,\n        currentFile: 'order'\n      });\n    }\n    if (prevState.currentFile !== currentFile && currentFile !== '') {\n      console.log('Hit');\n\n      this.importCSV();\n    }\n\n    if (prevState.productFileData !== productFileData) {\n      this.setState({\n        loading: false\n      });\n    }\n    if (prevState.orderFileData !== orderFileData) {\n      this.setState({\n        loading: false\n      });\n    }\n\n    if (\n      !isEmpty(productFileData) &&\n      !isEmpty(orderFileData) &&\n      isEmpty(packsToDelivery) &&\n      loading === false\n    ) {\n      const resultsData = [];\n\n      for (let i = 0; i < orderFileData.length; i++) {\n        const item = orderFileData[i];\n\n        for (let p = 0; p < productFileData.length; p++) {\n          const product = productFileData[p];\n\n          if (item.code === product.code) {\n            const model = createModel(product, item.quantity);\n            let results = solver.Solve(model);\n            const rData = {\n              ...results,\n              code: item.code,\n              name: product.name,\n              ordered: item.quantity\n            };\n            resultsData.push(rData);\n          }\n        }\n      }\n\n      this.setState({\n        packsToDelivery: resultsData,\n        loading: false\n      });\n    }\n  }\n\n  handleProductUpload = event => {\n    if (\n      !isEmpty(event.target.files) &&\n      event.target.files[0].type === 'text/csv'\n    ) {\n      this.setState({\n        csvProductFile: event.target.files[0],\n        errorMsg: {}\n      });\n    } else {\n      let error = {\n        product: 'Please upload a csv. file type'\n      };\n      this.setState({\n        errorMsg: error\n      });\n    }\n  };\n\n  handleOrderUpload = event => {\n    if (\n      !isEmpty(event.target.files) &&\n      event.target.files[0].type === 'text/csv'\n    ) {\n      this.setState({\n        csvOrderFile: event.target.files[0],\n        errorMsg: {}\n      });\n    } else {\n      this.setState({\n        errorMsg: {\n          order: 'Please upload a csv. file type'\n        }\n      });\n    }\n  };\n\n  importCSV = () => {\n    const { csvProductFile, csvOrderFile, currentFile } = this.state;\n\n    if (currentFile === 'product') {\n      Papa.parse(csvProductFile, {\n        complete: this.updateProductData,\n        header: true\n      });\n    }\n    if (currentFile === 'order') {\n      Papa.parse(csvOrderFile, {\n        complete: this.updateOrderData,\n        header: true\n      });\n    }\n  };\n\n  updateProductData = result => {\n    let data = result.data;\n\n    if (!isEmpty(data)) {\n      let checkData = false;\n      const updatedProductData = data.map(d => {\n        // Convert uData column titles into lowercased keys\n        const lowercasedKeysData = convertKeysToLowerCase(d);\n\n        // Check data keys match required data\n        let keys = Object.keys(lowercasedKeysData);\n        if (keys.indexOf('name', 'code', 'packs') > -1) {\n          checkData = true;\n        } else {\n          checkData = false;\n        }\n\n        // Convert packs into into an array of data separating the quanity & costs in each order\n        let uPacksData = [];\n        if (!isEmpty(lowercasedKeysData.packs)) {\n          let packs = lowercasedKeysData.packs.split(/\\r?\\n/);\n          for (let i = 0; i < packs.length; i++) {\n            const pack = packs[i];\n            const [quanity, cost] = pack.split('@');\n            let uPack = {\n              quantity: quanity.trim(),\n              cost: cost.trim().replace('$', '')\n            };\n            uPacksData.push(uPack);\n          }\n        }\n        // Update the orginal data set with the updated packs data\n        if (!isEmpty(uPacksData)) {\n          lowercasedKeysData.packs = uPacksData;\n          return lowercasedKeysData;\n        }\n        return null;\n      });\n\n      console.log('Check', checkData);\n\n      if (!checkData) {\n        this.setState({\n          errorMsg: {\n            product:\n              \"File Columns titles must be 'Name','Code','Packs'\"\n          },\n          loading: false,\n          csvProductFile: null\n        });\n        return;\n      }\n\n      this.setState({\n        errorMsg: {},\n        productFileData: updatedProductData\n      });\n    } else {\n      this.setState({\n        errorMsg: 'Uploaded file contained no purchase orders'\n      });\n    }\n  };\n\n  updateOrderData = result => {\n    let data = result.data;\n\n    if (!isEmpty(data)) {\n      let checkData = false;\n      const updatedProductData = data.map(d => {\n        // Convert uData column titles into lowercased keys\n        const lowercasedKeysData = convertKeysToLowerCase(d);\n        // Check data keys match required data\n        let keys = Object.keys(lowercasedKeysData);\n        if (keys.indexOf('quantity', 'code') > -1) {\n          checkData = true;\n        } else {\n          checkData = false;\n        }\n        return lowercasedKeysData;\n      });\n      console.log('Check', checkData);\n\n      if (!checkData) {\n        this.setState({\n          errorMsg: {\n            order: \"File Columns titles must be 'Quantity','Code'\"\n          },\n          loading: false,\n          csvProductFile: null\n        });\n        return;\n      }\n      this.setState({\n        errorMsg: {},\n        orderFileData: updatedProductData\n      });\n    } else {\n      this.setState({\n        errorMsg: 'Uploaded file contained no purchase orders'\n      });\n    }\n  };\n\n  displayPackTypes = orderObj => {\n    const objKeys = Object.keys(orderObj);\n    let filteredKeys = objKeys.filter(key => {\n      return key.includes('pack');\n    });\n    let packTypes = filteredKeys.map((packType, i) => {\n      let quanity = orderObj[packType];\n      if (quanity !== 0) {\n        return (\n          <p key={i}>\n            {packType} * {quanity}\n          </p>\n        );\n      }\n      return null;\n    });\n\n    return packTypes;\n  };\n\n  render() {\n    const {\n      packsToDelivery,\n      errorMsg,\n      productFileData,\n      orderFileData\n    } = this.state;\n    let shippingInfo = null;\n\n    if (!isEmpty(packsToDelivery)) {\n      shippingInfo = packsToDelivery.map(order => {\n        return (\n          <li key={order.code}>\n            <div>{order.code}</div>\n            <div>{order.name}</div>\n            <div>{order.ordered}</div>\n            <div>{this.displayPackTypes(order)}</div>\n            <div>${order.result}</div>\n          </li>\n        );\n      });\n    }\n\n    let inputProductSuccessClass = '';\n    let inputProductOrderClass = '';\n    if (!isEmpty(productFileData)) {\n      inputProductSuccessClass = 'success';\n    }\n    if (!isEmpty(orderFileData)) {\n      inputProductOrderClass = 'success';\n    }\n\n    return (\n      <section className=\"header\">\n        <h1>Bakery Order Processing</h1>\n        <h3>Saving Your Shipping Space</h3>\n\n        <div className=\"uploadBanner\">\n          <ul>\n            <li>\n              <div>\n                <input\n                  id=\"file-upload-product\"\n                  className=\"inputfile product\"\n                  type=\"file\"\n                  onChange={this.handleProductUpload}\n                />\n                <label\n                  htmlFor=\"file-upload-product\"\n                  className={inputProductSuccessClass}\n                >\n                  Upload Product Data CSV. File\n                </label>\n              </div>\n              {errorMsg.product && <span>{errorMsg.product}</span>}\n            </li>\n            <li>\n              <div>\n                <input\n                  id=\"file-upload-order\"\n                  className=\"inputfile\"\n                  type=\"file\"\n                  ref={input => {\n                    this.filesInput = input;\n                  }}\n                  name=\"file\"\n                  onChange={this.handleOrderUpload}\n                />\n                <label\n                  htmlFor=\"file-upload-order\"\n                  className={inputProductOrderClass}\n                >\n                  Upload Purchase Order CSV. File\n                </label>\n              </div>\n              {errorMsg.order && <span>{errorMsg.order}</span>}\n            </li>\n          </ul>\n        </div>\n        {shippingInfo && (\n          <ul className=\"shippingInfo\">\n            <li>\n              <div>Code</div>\n              <div>Product Name</div>\n              <div>Quanity</div>\n              <div>Packs</div>\n              <div>Total</div>\n            </li>\n            {shippingInfo}\n          </ul>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './sass/index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}