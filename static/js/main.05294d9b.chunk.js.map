{"version":3,"sources":["utils/utils.js","App.js","serviceWorker.js","index.js"],"names":["isEmpty","value","undefined","Object","keys","length","Array","isArray","trim","convertKeysToLowerCase","data","key","n","lowercasedKeysData","toLowerCase","createModel","product","quantity","packs","variables","ints","p","item","pack","cost","name","concat","objectSpread","defineProperty","model","optimize","opType","constraints","min","equal","console","log","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleProductUpload","event","target","files","type","setState","errorMsg","csvProductFile","handleOrderUpload","order","csvOrderFile","importCSV","_this$state","state","currentFile","Papa","parse","complete","updateProductData","header","updateOrderData","result","checkData","index","row","includes","loading","updatedProductData","map","d","uPacksData","split","i","_pack$split","_pack$split2","slicedToArray","quanity","uPack","replace","push","productFileData","orderFileData","displayPackTypes","orderObj","filter","packType","react_default","a","createElement","packsToDelivery","_this$state2","resultsData","code","results","solver","Solve","rData","ordered","prevProps","prevState","_this$state3","_this2","_this$state4","shippingInfo","className","id","onChange","htmlFor","ref","input","filesInput","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.05294d9b.chunk.js","sourcesContent":["export const isEmpty = value =>\n  value === undefined ||\n  value === null ||\n  value === 0 ||\n  (typeof value === 'object' && Object.keys(value).length === 0) ||\n  (Array.isArray(value) && value.length === 0) ||\n  (typeof value === 'string' && value.trim().length === 0) ||\n  (typeof value === 'string' && value === 'null');\n\nexport const convertKeysToLowerCase = data => {\n  let key,\n    keys = Object.keys(data);\n  let n = keys.length;\n  let lowercasedKeysData = {};\n  while (n--) {\n    key = keys[n];\n    lowercasedKeysData[key.toLowerCase()] = data[key];\n  }\n  return lowercasedKeysData;\n};\n\nexport const createModel = (product, quantity) => {\n  if (!isEmpty(product.packs)) {\n    let variables = {};\n    let ints = {};\n    for (let p = 0; p < product.packs.length; p++) {\n      const item = product.packs[p];\n      const pack = {\n        quantity: item.quantity,\n        cost: item.cost\n      };\n      let name = `pack${item.quantity}`;\n      variables = {\n        ...variables,\n        [name]: pack\n      };\n      ints = {\n        ...ints,\n        [name]: 1\n      };\n    }\n    const model = {\n      optimize: 'cost',\n      opType: 'min',\n      constraints: {\n        cost: { min: 0 },\n        quantity: { equal: quantity }\n      },\n      variables: variables,\n      ints: ints\n    };\n    console.log('variables', variables);\n    console.log('model', model);\n    return model;\n  }\n\n  console.log('item', product);\n  console.log('product', quantity);\n};\n","import React, { Component } from 'react';\nimport Papa from 'papaparse';\nimport {\n  isEmpty,\n  convertKeysToLowerCase,\n  createModel\n} from './utils/utils';\nimport solver from 'javascript-lp-solver';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      csvProductFile: null,\n      csvOrderFile: null,\n      // productFileData: [\n      //   {\n      //     code: 'VS5',\n      //     name: 'Vegemite Scroll',\n      //     packs: [\n      //       { cost: '6.99', quantity: '3' },\n      //       { cost: '8.99', quantity: '5' }\n      //     ]\n      //   },\n      //   {\n      //     code: 'MB11',\n      //     name: 'Blueberry Muffin',\n      //     packs: [\n      //       { cost: '9.95', quantity: '2' },\n      //       { cost: '16.95', quantity: '5' },\n      //       { cost: '24.95', quantity: '8' }\n      //     ]\n      //   },\n      //   {\n      //     code: 'CF',\n      //     name: 'Croissant',\n      //     packs: [\n      //       { cost: '5.95', quantity: '3' },\n      //       { cost: '9.95', quantity: '5' },\n      //       { cost: '16.99', quantity: '9' }\n      //     ]\n      //   }\n      // ],\n      // orderFileData: [\n      //   { code: 'VS5', quantity: '10' },\n      //   { code: 'MB11', quantity: '14' },\n      //   { code: 'CF', quantity: '13' }\n      // ],\n      productFileData: [],\n      orderFileData: [],\n      packsToDelivery: [],\n      loading: false,\n      currentFile: '',\n      errorMsg: {}\n    };\n  }\n\n  componentDidMount() {\n    const {\n      csvProductFile,\n      csvOrderFile,\n      productFileData,\n      orderFileData,\n      packsToDelivery,\n      currentFile,\n      loading\n    } = this.state;\n\n    if (\n      !isEmpty(productFileData) &&\n      !isEmpty(orderFileData) &&\n      isEmpty(packsToDelivery) &&\n      loading === false\n    ) {\n      console.log('READY', orderFileData);\n      const resultsData = [];\n\n      for (let i = 0; i < orderFileData.length; i++) {\n        const item = orderFileData[i];\n\n        for (let p = 0; p < productFileData.length; p++) {\n          const product = productFileData[p];\n\n          if (item.code === product.code) {\n            const model = createModel(product, item.quantity);\n            let results = solver.Solve(model);\n            console.log('results', results);\n            console.log('item.quantity', item);\n            console.log('product', product);\n            const rData = {\n              ...results,\n              code: item.code,\n              name: product.name,\n              ordered: item.quantity\n            };\n            resultsData.push(rData);\n          }\n        }\n      }\n\n      this.setState({\n        packsToDelivery: resultsData,\n        loading: false\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      csvProductFile,\n      csvOrderFile,\n      productFileData,\n      orderFileData,\n      packsToDelivery,\n      currentFile,\n      loading\n    } = this.state;\n\n    if (!loading && prevState.csvProductFile !== csvProductFile) {\n      // console.log('hit');\n\n      this.setState({\n        loading: true,\n        currentFile: 'product'\n      });\n    }\n    if (!loading && prevState.csvOrderFile !== csvOrderFile) {\n      this.setState({\n        loading: true,\n        currentFile: 'order'\n      });\n    }\n    if (prevState.currentFile !== currentFile) {\n      console.log('hit1');\n      this.importCSV();\n    }\n\n    if (prevState.productFileData !== productFileData) {\n      this.setState({\n        loading: false\n      });\n    }\n    if (prevState.orderFileData !== orderFileData) {\n      this.setState({\n        loading: false\n      });\n    }\n\n    if (\n      !isEmpty(productFileData) &&\n      !isEmpty(orderFileData) &&\n      isEmpty(packsToDelivery) &&\n      loading === false\n    ) {\n      // console.log('READY', orderFileData);\n      const resultsData = [];\n\n      for (let i = 0; i < orderFileData.length; i++) {\n        const item = orderFileData[i];\n\n        for (let p = 0; p < productFileData.length; p++) {\n          const product = productFileData[p];\n\n          if (item.code === product.code) {\n            const model = createModel(product, item.quantity);\n            let results = solver.Solve(model);\n            // console.log('results', results);\n            // console.log('item.quantity', item);\n            // console.log('product', product);\n            const rData = {\n              ...results,\n              code: item.code,\n              name: product.name,\n              ordered: item.quantity\n            };\n            resultsData.push(rData);\n          }\n        }\n      }\n\n      this.setState({\n        packsToDelivery: resultsData,\n        loading: false\n      });\n    }\n  }\n\n  handleProductUpload = event => {\n    console.log('event.target.files[0]', event.target.files[0].type);\n    if (\n      event.target.files[0].type === 'text/csv' &&\n      !isEmpty(event.target.files)\n    ) {\n      this.setState({\n        csvProductFile: event.target.files[0],\n        errorMsg: {}\n      });\n    } else {\n      let error = {\n        product: 'Please upload a csv. file type'\n      };\n      this.setState({\n        errorMsg: error\n      });\n    }\n  };\n\n  handleOrderUpload = event => {\n    console.log('event.target.files[0]', event.target.files[0].type);\n    if (\n      event.target.files[0].type === 'text/csv' &&\n      !isEmpty(event.target.files)\n    ) {\n      this.setState({\n        csvOrderFile: event.target.files[0],\n        errorMsg: {}\n      });\n    } else {\n      this.setState({\n        errorMsg: {\n          order: 'Please upload a csv. file type'\n        }\n      });\n    }\n  };\n\n  importCSV = () => {\n    const { csvProductFile, csvOrderFile, currentFile } = this.state;\n\n    if (currentFile === 'product') {\n      Papa.parse(csvProductFile, {\n        complete: this.updateProductData,\n        header: true\n      });\n    }\n    if (currentFile === 'order') {\n      Papa.parse(csvOrderFile, {\n        complete: this.updateOrderData,\n        header: true\n      });\n    }\n  };\n\n  updateProductData = result => {\n    let data = result.data;\n    // Check data keys match required data\n    let checkData = false;\n    for (let index = 0; index < data.length; index++) {\n      const row = data[index];\n      let keys = Object.keys(row);\n      console.log('keys', keys);\n      if (['name', 'code', 'packs'].includes(keys) > -1) {\n        checkData = true;\n      } else {\n        checkData = false;\n      }\n    }\n\n    if (!checkData) {\n      console.log('Error');\n      this.setState({\n        errorMsg: {\n          product: \"File Columns titles must be 'Name','Code','Packs'\"\n        },\n        loading: false,\n        csvProductFile: null\n      });\n      return;\n    }\n\n    if (!isEmpty(data)) {\n      const updatedProductData = data.map(d => {\n        // Convert uData column titles into lowercased keys\n        const lowercasedKeysData = convertKeysToLowerCase(d);\n        // Convert packs into into an array of data separating the quanity & costs in each order\n        let uPacksData = [];\n        if (!isEmpty(lowercasedKeysData.packs)) {\n          let packs = lowercasedKeysData.packs.split(/\\r?\\n/);\n          for (let i = 0; i < packs.length; i++) {\n            const pack = packs[i];\n            const [quanity, cost] = pack.split('@');\n            let uPack = {\n              quantity: quanity.trim(),\n              cost: cost.trim().replace('$', '')\n            };\n            uPacksData.push(uPack);\n          }\n        }\n        // Update the orginal data set with the updated packs data\n        if (!isEmpty(uPacksData)) {\n          lowercasedKeysData.packs = uPacksData;\n          return lowercasedKeysData;\n        }\n        return null;\n      });\n      this.setState({\n        errorMsg: {},\n        productFileData: updatedProductData\n      });\n    } else {\n      this.setState({\n        errorMsg: 'Uploaded file contained no purchase orders'\n      });\n    }\n  };\n\n  updateOrderData = result => {\n    let data = result.data;\n\n    // Check data keys match required data\n    let checkData = false;\n    for (let index = 0; index < data.length; index++) {\n      const row = data[index];\n      let keys = Object.keys(row);\n      console.log('keys', keys);\n      if (['quantity', 'code', 'packs'].includes(keys) > -1) {\n        checkData = true;\n      } else {\n        checkData = false;\n      }\n    }\n\n    if (!checkData) {\n      console.log('Error');\n      this.setState({\n        errorMsg: {\n          order: \"File Columns titles must be 'Quantity','Code'\"\n        },\n        loading: false,\n        csvOrderFile: null\n      });\n      return;\n    }\n\n    if (!isEmpty(data)) {\n      const updatedProductData = data.map(d => {\n        // Convert uData column titles into lowercased keys\n        const lowercasedKeysData = convertKeysToLowerCase(d);\n        return lowercasedKeysData;\n      });\n      this.setState({\n        errorMsg: {},\n        orderFileData: updatedProductData\n      });\n    } else {\n      this.setState({\n        errorMsg: 'Uploaded file contained no purchase orders'\n      });\n    }\n  };\n\n  displayPackTypes = orderObj => {\n    const objKeys = Object.keys(orderObj);\n    // console.log('objKeys', objKeys);\n    let filteredKeys = objKeys.filter(key => {\n      // console.log('key', key);\n      return key.includes('pack');\n    });\n    let packTypes = filteredKeys.map((packType, i) => {\n      let quanity = orderObj[packType];\n      if (quanity !== 0) {\n        return (\n          <p key={i}>\n            {packType} * {quanity}\n          </p>\n        );\n      }\n    });\n\n    return packTypes;\n  };\n\n  render() {\n    const { packsToDelivery, errorMsg } = this.state;\n\n    let shippingInfo = null;\n\n    console.log('state', this.state);\n\n    if (!isEmpty(packsToDelivery)) {\n      shippingInfo = packsToDelivery.map(order => {\n        return (\n          <li key={order.code}>\n            <div>{order.code}</div>\n            <div>{order.name}</div>\n            <div>{order.ordered}</div>\n            <div>{this.displayPackTypes(order)}</div>\n            <div>${order.result}</div>\n          </li>\n        );\n      });\n    }\n\n    return (\n      <section className=\"header\">\n        <h1>Bakery Order Processing</h1>\n        <h3>Saving Your Shipping Space</h3>\n\n        <div className=\"uploadBanner\">\n          <ul>\n            <li>\n              <div>\n                <input\n                  id=\"file-upload-product\"\n                  className=\"inputfile product\"\n                  type=\"file\"\n                  onChange={this.handleProductUpload}\n                />\n                <label htmlFor=\"file-upload-product\">\n                  Upload Product Data CSV. File\n                </label>\n              </div>\n              {errorMsg.product && <span>{errorMsg.product}</span>}\n            </li>\n            <li>\n              <div>\n                <input\n                  id=\"file-upload-order\"\n                  className=\"inputfile\"\n                  type=\"file\"\n                  ref={input => {\n                    this.filesInput = input;\n                  }}\n                  name=\"file\"\n                  onChange={this.handleOrderUpload}\n                />\n                <label htmlFor=\"file-upload-order\">\n                  Upload Purchase Order CSV. File\n                </label>\n              </div>\n              {errorMsg.order && <span>{errorMsg.order}</span>}\n            </li>\n          </ul>\n        </div>\n        {shippingInfo && (\n          <ul className=\"shippingInfo\">\n            <li>\n              <div>Code</div>\n              <div>Product Name</div>\n              <div>Quanity</div>\n              <div>Packs</div>\n              <div>Total</div>\n            </li>\n            {shippingInfo}\n          </ul>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './sass/index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}